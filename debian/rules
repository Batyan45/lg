#!/usr/bin/make -f
# Minimal dh-cargo rules with robust offline vendoring.

# Run each recipe in a single shell (avoids fragile line continuations)
.ONESHELL:
SHELL := /bin/sh

# Export needed for dh-cargo
export DEB_CARGO_CRATE=lg

%:
	dh $@ --buildsystem=cargo

# Prepare vendored dependencies for offline builds on Launchpad.
# If debian/vendor.tar.xz is present, unpack it and configure Cargo
# to use the vendored sources offline. This avoids network access.
override_dh_auto_configure:
	set -eu
	if [ -f debian/vendor.tar.xz ]; then
		echo "Using vendored dependencies from debian/vendor.tar.xz"
		tar -xf debian/vendor.tar.xz -C .
		mkdir -p .cargo
		cat > .cargo/config.toml <<-'EOF'
		[source.crates-io]
		replace-with = "vendored-sources"
		
		[source.vendored-sources]
		directory = "vendor"
		
		[net]
		offline = true
		EOF
		# Cargo 1.75 understands lock format v3 only.
		if [ -f Cargo.lock ] && grep -q '^version = 4$$' Cargo.lock; then
			echo "Downgrading Cargo.lock format v4 -> v3 for Cargo 1.75"
			sed -i 's/^version = 4$$/version = 3/' Cargo.lock
		fi
		# Prune crates known to fail on the builder toolchain (if present)
		rm -rf vendor/home || true
	elif [ -z "$${ALLOW_ONLINE:-}" ]; then
		echo "ERROR: debian/vendor.tar.xz not found and ALLOW_ONLINE not set."
		echo "Run: debian/prepare-vendor.sh (requires network)"
		exit 1
	else
		echo "No vendor archive; proceeding with online build (ALLOW_ONLINE=1)"
	fi

override_dh_auto_build:
	cargo build --release --locked --verbose

override_dh_auto_test:
	# No tests; skip
	true

override_dh_auto_clean:
	# Clean cargo target and local vendor/config created during build
	rm -rf target vendor .cargo
	- dh_auto_clean || true
